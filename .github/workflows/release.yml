name: Release Plugin

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install frontend dependencies
        run: npm ci

      - name: Update plugin version
        run: |
          # Update version in plugin.json
          sed -i 's/"version": "[^"]*"/"version": "${{ steps.version.outputs.version }}"/' src/plugin.json
          # Update version in package.json
          sed -i 's/"version": "[^"]*"/"version": "${{ steps.version.outputs.version }}"/' package.json
          echo "Updated plugin version to ${{ steps.version.outputs.version }}"

      - name: Build frontend
        run: npm run build

      - name: Build backend for Linux (amd64)
        run: |
          cd cmd/backend
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ../../dist/gpx_reporting_linux_amd64
          chmod +x ../../dist/gpx_reporting_linux_amd64

      - name: Build backend for Linux (arm64)
        run: |
          cd cmd/backend
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o ../../dist/gpx_reporting_linux_arm64
          chmod +x ../../dist/gpx_reporting_linux_arm64

      - name: Build backend for Darwin (amd64)
        run: |
          cd cmd/backend
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o ../../dist/gpx_reporting_darwin_amd64
          chmod +x ../../dist/gpx_reporting_darwin_amd64

      - name: Build backend for Darwin (arm64)
        run: |
          cd cmd/backend
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -o ../../dist/gpx_reporting_darwin_arm64
          chmod +x ../../dist/gpx_reporting_darwin_arm64

      - name: Package plugin for Linux (amd64)
        run: |
          # Copy the platform-specific backend binary to dist
          chmod +x dist/gpx_reporting_linux_amd64

          # Verify the binary exists
          ls -lh dist/gpx_reporting_linux_amd64
          file dist/gpx_reporting_linux_amd64

          # Create platform-specific package directory with plugin ID as folder name
          mkdir -p ci/packages/fulgerx2007-scheduledreports-app

          # Copy built artifacts (excluding platform-specific binaries)
          rsync -av --exclude='gpx_reporting_*' dist/ ci/packages/fulgerx2007-scheduledreports-app/
          rsync -av dist/gpx_reporting_linux_amd64 ci/packages/fulgerx2007-scheduledreports-app/gpx_reporting_linux_amd64

          # Copy Go source files and manifest (required by Grafana validator)
          rsync -av --include='*.go' --include='*/' --exclude='*' pkg/ ci/packages/fulgerx2007-scheduledreports-app/pkg/
          rsync -av --include='*.go' --include='*/' --exclude='*' cmd/ ci/packages/fulgerx2007-scheduledreports-app/cmd/
          cp go.mod go.sum ci/packages/fulgerx2007-scheduledreports-app/

          # Verify package contents
          echo "=== Package contents ==="
          ls -lh ci/packages/fulgerx2007-scheduledreports-app/ | grep gpx || echo "No gpx_reporting found!"

          # Create archive
          cd ci/packages
          zip -r ../../scheduled-reports-app-${{ steps.version.outputs.version }}.linux-amd64.zip fulgerx2007-scheduledreports-app

          # Clean up for next platform
          cd ../..
          rm -rf ci/packages

      - name: Package plugin for Linux (arm64)
        run: |
          # Copy the platform-specific backend binary to dist
          cp dist/gpx_reporting_linux_arm64 dist/gpx_reporting
          chmod +x dist/gpx_reporting

          # Create platform-specific package directory with plugin ID as folder name
          mkdir -p ci/packages/fulgerx2007-scheduledreports-app

          # Copy built artifacts (excluding platform-specific binaries)
          rsync -av --exclude='gpx_reporting_*' dist/ ci/packages/fulgerx2007-scheduledreports-app/

          # Copy Go source files and manifest (required by Grafana validator)
          rsync -av --include='*.go' --include='*/' --exclude='*' pkg/ ci/packages/fulgerx2007-scheduledreports-app/pkg/
          rsync -av --include='*.go' --include='*/' --exclude='*' cmd/ ci/packages/fulgerx2007-scheduledreports-app/cmd/
          cp go.mod go.sum ci/packages/fulgerx2007-scheduledreports-app/

          # Create archive
          cd ci/packages
          zip -r ../../scheduled-reports-app-${{ steps.version.outputs.version }}.linux-arm64.zip fulgerx2007-scheduledreports-app

          # Clean up for next platform
          cd ../..
          rm -rf ci/packages
          rm dist/gpx_reporting

      - name: Package plugin for Darwin (amd64)
        run: |
          # Copy the platform-specific backend binary to dist
          cp dist/gpx_reporting_darwin_amd64 dist/gpx_reporting
          chmod +x dist/gpx_reporting

          # Create platform-specific package directory with plugin ID as folder name
          mkdir -p ci/packages/fulgerx2007-scheduledreports-app

          # Copy built artifacts (excluding platform-specific binaries)
          rsync -av --exclude='gpx_reporting_*' dist/ ci/packages/fulgerx2007-scheduledreports-app/

          # Copy Go source files and manifest (required by Grafana validator)
          rsync -av --include='*.go' --include='*/' --exclude='*' pkg/ ci/packages/fulgerx2007-scheduledreports-app/pkg/
          rsync -av --include='*.go' --include='*/' --exclude='*' cmd/ ci/packages/fulgerx2007-scheduledreports-app/cmd/
          cp go.mod go.sum ci/packages/fulgerx2007-scheduledreports-app/

          # Create archive
          cd ci/packages
          zip -r ../../scheduled-reports-app-${{ steps.version.outputs.version }}.darwin-amd64.zip fulgerx2007-scheduledreports-app

          # Clean up for next platform
          cd ../..
          rm -rf ci/packages
          rm dist/gpx_reporting

      - name: Package plugin for Darwin (arm64)
        run: |
          # Copy the platform-specific backend binary to dist
          cp dist/gpx_reporting_darwin_arm64 dist/gpx_reporting
          chmod +x dist/gpx_reporting

          # Create platform-specific package directory with plugin ID as folder name
          mkdir -p ci/packages/fulgerx2007-scheduledreports-app

          # Copy built artifacts (excluding platform-specific binaries)
          rsync -av --exclude='gpx_reporting_*' dist/ ci/packages/fulgerx2007-scheduledreports-app/

          # Copy Go source files and manifest (required by Grafana validator)
          rsync -av --include='*.go' --include='*/' --exclude='*' pkg/ ci/packages/fulgerx2007-scheduledreports-app/pkg/
          rsync -av --include='*.go' --include='*/' --exclude='*' cmd/ ci/packages/fulgerx2007-scheduledreports-app/cmd/
          cp go.mod go.sum ci/packages/fulgerx2007-scheduledreports-app/

          # Create archive
          cd ci/packages
          zip -r ../../scheduled-reports-app-${{ steps.version.outputs.version }}.darwin-arm64.zip fulgerx2007-scheduledreports-app

          # Clean up
          cd ../..
          rm -rf ci/packages

      - name: Generate checksums
        run: |
          md5sum scheduled-reports-app-*.zip > checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.version.outputs.tag_name }}
          body: |
            ## Grafana Scheduled Reports Plugin ${{ steps.version.outputs.version }}

            ### Installation

            Download the appropriate archive for your platform:
            - **Linux (amd64)**: `scheduled-reports-app-${{ steps.version.outputs.version }}.linux-amd64.zip`
            - **Linux (arm64)**: `scheduled-reports-app-${{ steps.version.outputs.version }}.linux-arm64.zip`
            - **macOS (Intel)**: `scheduled-reports-app-${{ steps.version.outputs.version }}.darwin-amd64.zip`
            - **macOS (Apple Silicon)**: `scheduled-reports-app-${{ steps.version.outputs.version }}.darwin-arm64.zip`

            **1. Extract the archive to your Grafana plugins directory:**
            ```bash
            unzip scheduled-reports-app-${{ steps.version.outputs.version }}.<platform>.zip -d /var/lib/grafana/plugins/
            ```

            **2. Restart Grafana to load the plugin:**
            ```bash
            systemctl restart grafana-server
            ```

            **3. Enable the plugin:**
            - Navigate to **Administration → Plugins** in Grafana
            - Find **"Scheduled Reports"** and click **Enable**
            - Go to **Apps → Scheduled Reports** to start using the plugin

            ### Features
            - ✅ Flexible scheduling (daily, weekly, monthly, custom cron)
            - ✅ High-fidelity Chromium-based PDF rendering
            - ✅ Email delivery with SMTP support
            - ✅ Complete audit trail and run history
            - ✅ Multi-tenancy with per-organization settings
            - ✅ Service account authentication (Grafana 11.6+)

            ### Checksums
            See `checksums.txt` for MD5 checksums of all archives.
          files: |
            scheduled-reports-app-*.zip
            checksums.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
